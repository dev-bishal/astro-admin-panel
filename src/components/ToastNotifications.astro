---

---

<!-- Toast Container -->
<div id="toast-container" class="toast-container top-right"></div>

<!-- Toaster Header -->
<header class="bg-white shadow-sm">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <div class="flex items-center justify-between">
            <div>
                <h1 class="text-2xl font-bold text-gray-900">Toast Notification</h1>
                <p class="text-gray-600">Custom Toast Notification using JavaScript.</p>
            </div>
            <div class="flex space-x-3">
                <button id="show-notifications"
                    class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium">
                    Show Notifications
                </button>
            </div>
        </div>
    </div>
</header>

<!-- Main Dashboard Content -->
<main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Toast Position Controls -->
    <div class="bg-white rounded-xl shadow-sm p-6 mb-8">
        <h2 class="text-xl font-semibold text-gray-800 mb-4">Toast Position Settings</h2>
        <p class="text-gray-600 mb-6">Choose where you want your toast notifications to appear:</p>

        <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3 mb-6">
            <button onclick="changeToastPosition('top-right')"
                class="position-option bg-white border border-gray-300 text-gray-700 px-4 py-3 rounded-lg font-medium text-sm active">
                <i class="fas fa-arrow-up-right mr-2"></i>Top Right
            </button>
            <button onclick="changeToastPosition('top-center')"
                class="position-option bg-white border border-gray-300 text-gray-700 px-4 py-3 rounded-lg font-medium text-sm">
                <i class="fas fa-arrow-up mr-2"></i>Top Center
            </button>
            <button onclick="changeToastPosition('top-left')"
                class="position-option bg-white border border-gray-300 text-gray-700 px-4 py-3 rounded-lg font-medium text-sm">
                <i class="fas fa-arrow-up-left mr-2"></i>Top Left
            </button>
            <button onclick="changeToastPosition('bottom-left')"
                class="position-option bg-white border border-gray-300 text-gray-700 px-4 py-3 rounded-lg font-medium text-sm">
                <i class="fas fa-arrow-down-left mr-2"></i>Bottom Left
            </button>
            <button onclick="changeToastPosition('bottom-center')"
                class="position-option bg-white border border-gray-300 text-gray-700 px-4 py-3 rounded-lg font-medium text-sm">
                <i class="fas fa-arrow-down mr-2"></i>Bottom Center
            </button>
            <button onclick="changeToastPosition('bottom-right')"
                class="position-option bg-white border border-gray-300 text-gray-700 px-4 py-3 rounded-lg font-medium text-sm">
                <i class="fas fa-arrow-down-right mr-2"></i>Bottom Right
            </button>
        </div>

        <!-- Toast Demo Controls -->
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Toast Notification Demo</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
            <button onclick="showSuccessToast()"
                class="bg-green-600 hover:bg-green-700 text-white px-4 py-3 rounded-lg font-medium flex items-center justify-center">
                <i class="fas fa-check-circle mr-2"></i> Success
            </button>
            <button onclick="showErrorToast()"
                class="bg-red-600 hover:bg-red-700 text-white px-4 py-3 rounded-lg font-medium flex items-center justify-center">
                <i class="fas fa-exclamation-circle mr-2"></i> Error
            </button>
            <button onclick="showWarningToast()"
                class="bg-yellow-600 hover:bg-yellow-700 text-white px-4py-3 rounded-lg font-medium flex items-center justify-center">
                <i class="fas fa-exclamation-triangle mr-2"></i> Warning
            </button>
            <button onclick="showInfoToast()"
                class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-3 rounded-lg font-medium flex items-center justify-center">
                <i class="fas fa-info-circle mr-2"></i> Info
            </button>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button onclick="showCustomToast()"
                class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-3 rounded-lg font-medium">
                Custom Toast
            </button>
            <button onclick="clearAllToasts()"
                class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-3 rounded-lg font-medium">
                Clear All
            </button>
        </div>
    </div>

    <!-- Sample Actions that Trigger Toasts -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div class="bg-white rounded-xl shadow-sm p-6">
            <h3 class="text-lg font-semibold text-gray-800 mb-4">Quick Actions</h3>
            <div class="space-y-4">
                <button onclick="simulateUserRegistration()"
                    class="w-full text-left p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                    <div class="flex items-center justify-between">
                        <div>
                            <h4 class="font-medium text-gray-800">Register New User</h4>
                            <p class="text-gray-600 text-sm">Add a new user to the system</p>
                        </div>
                        <i class="fas fa-arrow-right text-gray-400"></i>
                    </div>
                </button>
                <button onclick="simulateOrderProcessing()"
                    class="w-full text-left p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                    <div class="flex items-center justify-between">
                        <div>
                            <h4 class="font-medium text-gray-800">Process Orders</h4>
                            <p class="text-gray-600 text-sm">Process pending orders</p>
                        </div>
                        <i class="fas fa-arrow-right text-gray-400"></i>
                    </div>
                </button>
                <button onclick="simulateDataExport()"
                    class="w-full text-left p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                    <div class="flex items-center justify-between">
                        <div>
                            <h4 class="font-medium text-gray-800">Export Data</h4>
                            <p class="text-gray-600 text-sm">Export dashboard data</p>
                        </div>
                        <i class="fas fa-arrow-right text-gray-400"></i>
                    </div>
                </button>
            </div>
        </div>

        <div class="bg-white rounded-xl shadow-sm p-6">
            <h3 class="text-lg font-semibold text-gray-800 mb-4">System Status</h3>
            <div class="space-y-4">
                <div class="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                    <div class="flex items-center">
                        <i class="fas fa-check-circle text-green-600 mr-3"></i>
                        <span class="text-green-800">All systems operational</span>
                    </div>
                </div>
                <div class="flex items-center justify-between p-3 bg-yellow-50 rounded-lg">
                    <div class="flex items-center">
                        <i class="fas fa-exclamation-triangle text-yellow-600 mr-3"></i>
                        <span class="text-yellow-800">Scheduled maintenance in 2 hours</span>
                    </div>
                </div>
                <div class="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                    <div class="flex items-center">
                        <i class="fas fa-info-circle text-blue-600 mr-3"></i>
                        <span class="text-blue-800">New features available</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

<script is:inline>
    // Toast Notification System with Position Support
    class ToastSystem {
        constructor() {
            this.container = document.getElementById('toast-container');
            this.toasts = new Set();
            this.currentPosition = 'top-right';
        }

        setPosition(position) {
            // Remove all position classes
            this.container.className = 'toast-container';
            // Add new position class
            this.container.classList.add(position);
            this.currentPosition = position;

            // Update active state in position buttons
            document.querySelectorAll('.position-option').forEach(btn => {
                btn.classList.remove('active');
            });
            document.querySelector(`button[onclick="changeToastPosition('${position}')"]`).classList.add('active');
        }

        show(options) {
            const {
                type = 'info',
                title = '',
                message = '',
                duration = 5000,
                dismissible = true
            } = options;

            // Create toast element
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                    <div class="toast-icon">
                        <i class="fas ${this.getIcon(type)}"></i>
                    </div>
                    <div class="toast-content">
                        <div class="toast-title">${title}</div>
                        <div class="toast-message">${message}</div>
                    </div>
                    ${dismissible ? '<button class="toast-close"><i class="fas fa-times"></i></button>' : ''}
                    ${duration > 0 ? `<div class="progress-bar" style="animation-duration: ${duration}ms"></div>` : ''}
                `;

            // Add to container based on position
            if (this.currentPosition.includes('bottom')) {
                this.container.appendChild(toast);
            } else {
                this.container.insertBefore(toast, this.container.firstChild);
            }

            this.toasts.add(toast);

            // Show animation
            setTimeout(() => toast.classList.add('show'), 10);

            // Auto remove if duration is set
            if (duration > 0) {
                setTimeout(() => this.remove(toast), duration);
            }

            // Close button event
            if (dismissible) {
                const closeBtn = toast.querySelector('.toast-close');
                closeBtn.addEventListener('click', () => this.remove(toast));
            }

            return toast;
        }

        remove(toast) {
            if (!this.toasts.has(toast)) return;

            toast.classList.remove('show');
            toast.classList.add('hide');

            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
                this.toasts.delete(toast);
            }, 300);
        }

        clearAll() {
            this.toasts.forEach(toast => this.remove(toast));
        }

        getIcon(type) {
            const icons = {
                success: 'fa-check',
                error: 'fa-exclamation',
                warning: 'fa-exclamation-triangle',
                info: 'fa-info'
            };
            return icons[type] || 'fa-info';
        }
    }

    // Initialize toast system
    const toastSystem = new ToastSystem();

    // Position Change Function
    function changeToastPosition(position) {
        toastSystem.setPosition(position);

        // Show a confirmation toast in the new position
        toastSystem.show({
            type: 'info',
            title: 'Position Changed',
            message: `Toasts will now appear in the ${position.replace('-', ' ')}`,
            duration: 3000
        });
    }

    // Demo Functions
    function showSuccessToast() {
        toastSystem.show({
            type: 'success',
            title: 'Success!',
            message: 'Your action was completed successfully.',
            duration: 5000
        });
    }

    function showErrorToast() {
        toastSystem.show({
            type: 'error',
            title: 'Error!',
            message: 'Something went wrong. Please try again.',
            duration: 6000
        });
    }

    function showWarningToast() {
        toastSystem.show({
            type: 'warning',
            title: 'Warning!',
            message: 'This action cannot be undone.',
            duration: 7000
        });
    }

    function showInfoToast() {
        toastSystem.show({
            type: 'info',
            title: 'Information',
            message: 'Here is some important information for you.',
            duration: 4000
        });
    }

    function showCustomToast() {
        toastSystem.show({
            type: 'info',
            title: 'Custom Notification',
            message: 'This is a custom toast with different settings.',
            duration: 8000,
            dismissible: true
        });
    }

    function clearAllToasts() {
        toastSystem.clearAll();
    }

    // Simulated Actions
    function simulateUserRegistration() {
        toastSystem.show({
            type: 'success',
            title: 'User Registered',
            message: 'New user has been successfully added to the system.',
            duration: 4000
        });
    }

    function simulateOrderProcessing() {
        toastSystem.show({
            type: 'info',
            title: 'Processing Orders',
            message: 'Processing 15 pending orders...',
            duration: 3000
        });

        // Simulate completion after delay
        setTimeout(() => {
            toastSystem.show({
                type: 'success',
                title: 'Orders Processed',
                message: 'All orders have been successfully processed.',
                duration: 4000
            });
        }, 2000);
    }

    function simulateDataExport() {
        toastSystem.show({
            type: 'info',
            title: 'Export Started',
            message: 'Preparing your data for export...',
            duration: 2000
        });

        setTimeout(() => {
            toastSystem.show({
                type: 'success',
                title: 'Export Complete',
                message: 'Your data has been exported successfully.',
                duration: 4000
            });
        }, 1500);
    }

    // Show notifications on button click
    document.getElementById('show-notifications').addEventListener('click', function () {
        showSuccessToast();
        setTimeout(showInfoToast, 500);
        setTimeout(showWarningToast, 1000);
        setTimeout(showErrorToast, 1500);
    });

    // Auto-show welcome notification
    document.addEventListener('DOMContentLoaded', function () {
        setTimeout(() => {
            toastSystem.show({
                type: 'info',
                title: 'Welcome to Dashboard',
                message: 'You can change toast position using the controls above.',
                duration: 6000
            });
        }, 1000);
    });
</script>